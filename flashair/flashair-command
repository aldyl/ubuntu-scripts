#!/usr/bin/env bash
# -------------------------------------------------------------------
# Tool to synchronise Toshiba Flashair SD Card
# It synchronise either :
#   - directory content
#   - media files
#
# Revision history :
#   30/03/2017, V1.0 - Creation by N. Bernaerts
#   15/04/2017, V1.1 - Complete rewrite with parameters
#   28/04/2017, V1.2 - Add single instance lock
#   12/08/2017, V1.3 - Add --delete-move parameter and notifications
#   02/09/2017, V1.4 - Add service notifications on current desktop
# -------------------------------------------------------------------

# check tools
command -v curl >/dev/null 2>&1 || { logger "FlashAir - curl is not installed"; exit 1; }
command -v composite >/dev/null 2>&1 || { logger "FlashAir - composite is not installed [imagemagick package]"; exit 1; }
command -v convert >/dev/null 2>&1 || { logger "FlashAir - convert is not installed [imagemagick package]"; exit 1; }
command -v inotifywait >/dev/null 2>&1 || { logger "FlashAir - inotifywait is not installed [inotify-tools package]"; exit 1; }
command -v zenity >/dev/null 2>&1 || { logger "FlashAir - zenity is not installed"; exit 1; }
command -v yad >/dev/null 2>&1 || { logger "FlashAir - yad is not installed"; exit 1; }
command -v desktop-display >/dev/null 2>&1 || { logger "FlashAir - desktop-display is not installed (https://github.com/NicolasBernaerts/ubuntu-scripts/tree/master/desktop)"; exit 1; }

# load flashair environment variables
. /usr/local/sbin/flashair-common

# empty arrays
ARR_ITEM=()

# if no argument, display help
if [ $# -eq 0 ] 
then
	echo "Tool to synchronise Toshiba Flashair SD Card content"
	echo "Only usable if laptop is connected to a Toshiba FlashAir wifi network"
	echo "Parameters are :"
	echo "  --connect              Actions to setup new connexion"
	echo "  --disconnect           Actions to deal with a disconnexion"
	echo "  --update               Update directory content from Flashair card"
	echo "  --download             Download files from Flashair card"
	echo "  --upload               Write files to Flashair card"
	echo "  --delete               Delete file from Flashair card"
	echo "  <item1> <item2> ...    Files/directories to handle"
	exit 1
fi

# loop to retrieve arguments
while test $# -gt 0
do
	case "$1" in
		"--connect") MODE="connect"; shift; ;;
		"--disconnect") MODE="disconnect"; shift; ;;
		"--update") MODE="update"; shift; ;;
		"--download") MODE="download"; shift; ;;
		"--upload") MODE="upload"; shift; ;;
		"--delete") MODE="delete"; shift; ;;
		*) ARR_ITEM=( "${ARR_ITEM[@]}" "$1" ); shift; ;;
	esac
done

echo "flashair command - ${MODE} : ${ARR_ITEM[@]}" >> /tmp/flash.log

# get default parameters from flashair.conf
FLASHAIR_CONFIRM=$(grep "^confirm-${MODE}=" "${FLASHAIR_CONF}" | cut -d'=' -f2-)
FLASHAIR_FILELIST=$(grep "^flashair-filelist=" "${FLASHAIR_CONF}" | cut -d'=' -f2-)

# create temporary files
TMP_HEADER=$(mktemp --tmpdir header-XXXXXXXXX.html)
TMP_FILE=$(mktemp --tmpdir file-XXXXXXXXX.jpg)

# --------------------------------------
#  Step 1 : Controls & Main parameters
# --------------------------------------

# confirmation by default
CONFIRMED=0

# get number of files to handle
NBR_ITEM=${#ARR_ITEM[@]}

# if given, get first parameter
[ ${NBR_ITEM} -gt 0 ] && CARD_FIRST_PATH=$(echo "${ARR_ITEM[0]}" | sed "s|^${FLASHAIR_ROOT}||")

# action according to command
case "${MODE}" in

	# -----------------------------
	#  flashair network connexion
	# -----------------------------
	"connect")

	# get flashair network address
	FLASHAIR_INTERFACE="${ARR_ITEM[0]}"
	FLASHAIR_NETWORK=$(ifconfig | sed -n -e '/'${FLASHAIR_INTERFACE}'/,$p' | grep "inet addr" | sed "s/^.*inet addr:\([0-9.]*\).*$/\1/" | cut -d'.' -f1-3)

	# look for entry in /etc/hosts
	FLASHAIR_ENTRY=$(grep " flashair$" "/etc/hosts")
	if [ "${FLASHAIR_ENTRY}" = "" ]
	then
		# create flashair entry in /etc/hosts
		echo "# flashair card" >> "/etc/hosts"
		echo "${FLASHAIR_NETWORK}.1 flashair" >> "/etc/hosts"
	else
		# update flashair address in /etc/hosts
		sed -i "s/^.* flashair$/${FLASHAIR_NETWORK}.1 flashair/g" "/etc/hosts"
	fi

	# if neeeded, create media directory
	[ ! -d "${FLASHAIR_ROOT}" ] && { mkdir "${FLASHAIR_ROOT}"; chmod 777 "${FLASHAIR_ROOT}"; }

	# if first time, create flashair bookmark to user nautilus configuration
	FLASHAIR_BOOKMARK=$(grep "${FLASHAIR_ROOT}" "/home/${DESKTOP_USER}/.config/gtk-3.0/bookmarks")
	[ "${FLASHAIR_BOOKMARK}" = "" ] && echo "file://${FLASHAIR_ROOT} Flashair (disconnected)" >> "/home/${DESKTOP_USER}/.config/gtk-3.0/bookmarks" 

	# enable right click download menu
	sed -i "s/^Enabled=.*$/Enabled=true/g" "/usr/local/share/file-manager/actions/flashair-action-download.desktop"

	# get the upload status of the card
	UPLOAD_ENABLED=$(curl "http://flashair/command.cgi?op=118")

	# if upload is allowed, enable right click upload and delete menus
	if [ "${UPLOAD_ENABLED}" = "1" ]
	then
		# enable upload and delete actions
		sed -i "s/^Enabled=.*$/Enabled=true/g" "/usr/local/share/file-manager/actions/flashair-action-upload.desktop"
		sed -i "s/^Enabled=.*$/Enabled=true/g" "/usr/local/share/file-manager/actions/flashair-action-delete.desktop"

		# update nautilus bookmark as (read-write)
		sed -i "s/Flashair.*$/Flashair (read-write)/g" "/home/${DESKTOP_USER}/.config/gtk-3.0/bookmarks"
	else
		# update nautilus bookmark as (read-only)
		sed -i "s/Flashair.*$/Flashair (read-only)/g" "/home/${DESKTOP_USER}/.config/gtk-3.0/bookmarks"
	fi

	# no file to handle in step 2
	ARR_ITEM=( )

	# desktop notification
	desktop-display notify-send --category=network.connected --icon=flashair-icon "FlashAir" "Card connected thru wifi & accessible under ${FLASHAIR_ROOT}"
	;;

	# -----------------------------
	#  flashair network disconnexion
	# -----------------------------
	"disconnect")

	# disable right click menus
	sed -i "s/^Enabled=.*$/Enabled=false/g" "/usr/local/share/file-manager/actions/flashair-action-download.desktop"
	sed -i "s/^Enabled=.*$/Enabled=false/g" "/usr/local/share/file-manager/actions/flashair-action-upload.desktop"
	sed -i "s/^Enabled=.*$/Enabled=false/g" "/usr/local/share/file-manager/actions/flashair-action-delete.desktop"

	# update nautilus bookmark with (disconnected)
	sed -i "s/Flashair.*$/Flashair (disconnected)/g" "/home/${DESKTOP_USER}/.config/gtk-3.0/bookmarks" 

	# no file to handle in step 2
	ARR_ITEM=( )

	# desktop notification
	desktop-display notify-send --category=network.disconnected --icon=flashair-icon "FlashAir" "Card disconnected thru wifi"
	;;

	# -------------------
	#  directory update
	# -------------------
	"update")


	# generate temporary files
	TMP_THUMB=$(mktemp --tmpdir thumb-XXXXXXXXX.png)
	TMP_BULLET=$(mktemp --tmpdir bullet-XXXXXXXXX.png)

	# directory to update is first element in the list
	ITEM="${ARR_ITEM[0]}"

	# path of the directory on flashair card
	CARD_ITEM_PATH=$(echo "${ITEM}" | sed "s|^${FLASHAIR_ROOT}||")
	[ "${CARD_ITEM_PATH}" = "" ] && CARD_ITEM_PATH="/"

	(
	# initial display
	echo "1"
	echo "# Flashair : Analyse content of ${CARD_ITEM_PATH}"

	# path of flashair filelist for current directory 
	ITEM_FILELIST="${ITEM}/${FLASHAIR_FILELIST}"

	# retrieve flashair filelist for directory from flashair card
	curl "http://flashair/command.cgi?op=100&DIR=${CARD_ITEM_PATH}" | tail -n +2 > "${ITEM_FILELIST}"
	chmod 666 "${ITEM_FILELIST}"

	# loop thru flashair filelist
	while read LINE;
	do
		# read current subitem data
		CARD_SUBITEM_NAME=$(echo "${LINE}" | cut -d',' -f2)
		CARD_SUBITEM_SIZE=$(echo "${LINE}" | cut -d',' -f3)
		CARD_SUBITEM_TYPE=$(echo "${LINE}" | cut -d',' -f4)
		CARD_SUBITEM_EXT=$(echo ${CARD_SUBITEM_NAME##*.})

		# generate local subitem path
		SUBITEM="${ITEM}/${CARD_SUBITEM_NAME}"

		# if current subitem is a file
		if [ ${CARD_SUBITEM_TYPE} -ge 32 ]
		then
			# if file does not exist locally, get thumbnail
			if [ ! -f "${SUBITEM}" ]
			then
				# display progress
				echo "# Flashair : Download ${CARD_ITEM_PATH}/${CARD_SUBITEM_NAME} thumbnail"

				# get file size on flashair card
				DISPLAY_SIZE=$(echo "${CARD_SUBITEM_SIZE}" | numfmt --to=iec)

				# download embedded thumbnail
				curl -o "${TMP_FILE}" --dump-header "${TMP_HEADER}" "http://flashair/thumbnail.cgi?${CARD_ITEM_PATH}/${CARD_SUBITEM_NAME}"
				THUMB_OK=$(grep "image/jpeg" "${TMP_HEADER}")

				# set generic thumbnail according to extension
				ORG_THUMB="/usr/share/icons/flashair-type-generic.jpg"
				[ "${CARD_SUBITEM_EXT}" = "jpg" -o "${CARD_SUBITEM_EXT}" = "JPG" ] && ORG_THUMB="/usr/share/icons/flashair-type-photo.jpg"
				[ "${CARD_SUBITEM_EXT}" = "mp4" -o "${CARD_SUBITEM_EXT}" = "MP4" ] && ORG_THUMB="/usr/share/icons/flashair-type-video.jpg"

				# if thumbnail succesfully downloaded, use it
				[ "${THUMB_OK}" != "" ] && ORG_THUMB="${TMP_FILE}"

				# convert icon to 192 pix
				convert -resize 256x "${ORG_THUMB}" "${TMP_THUMB}"

				# generate bullet
				convert -fill white -pointsize 38 -draw 'text 70,48 "'${DISPLAY_SIZE}'"' "/usr/share/icons/flashair-size.png" "${TMP_BULLET}"

				# create thumbnail with bullet
				composite -gravity South "${TMP_BULLET}" "${TMP_THUMB}" "${SUBITEM}"
				chmod 666 "${SUBITEM}"
			fi

		# else, if current item is a directory 
		elif [ ${CARD_SUBITEM_TYPE} -ge 16 ]
		then
			# if local directory does not exist
			if [ ! -d "${SUBITEM}" ]
			then
				# create local subdirectory (as rwxrwxrwx)
				mkdir --parent "${SUBITEM}"
				chmod 777 "${SUBITEM}"
			fi
		fi
	done < "${ITEM_FILELIST}"

	# end of progress display
	echo "100"
	) | desktop-display yad --progress --image=flashair-icon --no-buttons --undecorated --pulsate --center --auto-close

	# no file to handle in step 2
	ARR_ITEM=( )

	# delete temporary files
	rm -f "${TMP_THUMB}" "${TMP_BULLET}"
	;;

	# -----------------
	#  files download
	# -----------------
	"download")

	# if needed, ask confirmation
	[ ${#ARR_ITEM[@]} -gt 1 ] && TEXT="Download ${NBR_ITEM} file(s) from card ?" || TEXT="Download ${CARD_FIRST_PATH} from card ?"
	[ "${FLASHAIR_CONFIRM}" = "true" ] && { desktop-display yad --question --image=flashair-download --center --title "Flashair : Download" --text "${TEXT}"; CONFIRMED=$?; }

	# if download canceled, empty array of items
	[ ${CONFIRMED} -eq 1 ] && ARR_ITEM=( )
	;;

	# ---------------
	#  files upload
	# ---------------
	"upload")

	# if needed, ask confirmation
	[ ${#ARR_ITEM[@]} -gt 1 ] && TEXT="Upload ${NBR_ITEM} file(s) to card ?" || TEXT="Upload ${CARD_FIRST_PATH} to card ?"
	[ "${FLASHAIR_CONFIRM}" = "true" ] && { desktop-display yad --question --image=flashair-delete --center --title "Flashair : Upload" --text "${TEXT}"; CONFIRMED=$?; }

	# if upload canceled, empty array of items
	[ ${CONFIRMED} -eq 1 ] && ARR_ITEM=( )
	;;

	# ---------------
	#  files delete
	# ---------------
	"delete")

	# if needed, ask confirmation
	[ ${#ARR_ITEM[@]} -gt 1 ] && TEXT="Delete ${NBR_ITEM} file(s) from card ?" || TEXT="Delete ${CARD_FIRST_PATH} from card ?"
	[ "${FLASHAIR_CONFIRM}" = "true" ] && { desktop-display yad --question --image=flashair-delete --center --title "Flashair : Delete" --text "${TEXT}"; CONFIRMED=$?; }

	# if deleted canceled, empty array of items
	[ ${CONFIRMED} -eq 1 ] && ARR_ITEM=( )
	;;

	*)
	;;
esac

# ---------------------------
#  Step 2 : Action on files
# ---------------------------

# loop thru candidate files
for ITEM in "${ARR_ITEM[@]}"
do
	# path of item on flashair card
	CARD_ITEM_PATH=$(echo "${ITEM}" | sed "s|^${FLASHAIR_ROOT}||")
	
	# log action
	logger "flashair - ${MODE} ${CARD_ITEM_PATH}"

	# action according to mode
	case "${MODE}" in

		# -----------------
		#   download
		# -----------------
		"download")

		(
		# initial display
		echo "1"
		echo "# Flashair : Download ${CARD_ITEM_PATH}"

		# delete thumbnail
		rm -f "${ITEM}"

		# download file
		curl -o "${ITEM}" "http://flashair/${CARD_ITEM_PATH}"

		# set rw to all users
		chmod 666 "${ITEM}"
		echo "100"
		) | desktop-display yad --progress --image=flashair-download --no-buttons --undecorated --pulsate --center --auto-close
		;;

		# ---------------
		#   upload
		# ---------------
		"upload")

		(
		# initial display
		echo "1"
		echo "# Flashair : Upload ${CARD_ITEM_PATH}"

		# get upload directory
		CARD_ITEM_DIR=$(dirname "${CARD_ITEM_PATH}")

		# set upload directory
		curl -o "${TMP_FILE}" --dump-header "${TMP_HEADER}" "http://flashair/upload.cgi?UPDIR=${CARD_ITEM_DIR}"
		OPERATION_OK=$(grep "SUCCESS" "${TMP_FILE}")

		# if upload directory set, start upload
		[ "${OPERATION_OK}" != "" ] && curl --dump-header "${TMP_HEADER}" -i -X POST -H "Content-Type: multipart/form-data" -F "data=@${ITEM}" "http://flashair/upload.cgi"
		echo "100"
		) | desktop-display yad --progress --image=flashair-upload --no-buttons --undecorated --pulsate --center --auto-close
		;;

		# --------------------
		#   suppression
		# --------------------
		"delete")

		(
		# initial display
		echo "1"
		echo "# Flashair : Delete ${CARD_ITEM_PATH}"

		# send deletion command
		curl -o "${TMP_FILE}" --dump-header "${TMP_HEADER}" "http://flashair/upload.cgi?DEL=${CARD_ITEM_PATH}"

		# delete local file
		rm -f ${ITEM}
		echo "100"
		) | desktop-display yad --progress --image=flashair-delete --no-buttons --undecorated --pulsate --center --auto-close
		;;

		*)
		;;

	esac
done

# remove temporary files and lock
rm -f "${TMP_FILE}" "${TMP_HEADER}"
