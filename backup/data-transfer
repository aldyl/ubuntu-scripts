#!/usr/bin/env bash
# ---------------------------------------------------------------------
#  Script to backup/restore current user folders and application data
#  on any removable media during computer complete reinstallation
#
#  Backup  :  ./data-transfer --backup ...
#  Restore :  ./data-transfer --restore  ...
#
#  All backup files will be stored under current folder
#
#  Revision history :
#   10/06/2016, V1.0 - Creation by N. Bernaerts
#   15/08/2016, V1.1 - Add target directory
#   10/04/2017, V1.2 - Add docky
#   17/04/2017, V2.0 - Complete rewrite, based on .ini configuration
#   15/09/2017, V2.1 - Add dconf handling
#   11/11/2019, V2.2 - Download default .ini file is absent
# ---------------------------------------------------------------------

# default to normal mode
MODE="normal"

# set working directory to current directory
BACKUP_DIR=$(dirname $(readlink -f $0))

# set configuration file
CONF_INI="${BACKUP_DIR}/data-transfer.ini"

# check commands
command -v xdg-user-dir >/dev/null 2>&1 || { echo "Please install xdg-user-dir utility"; exit 1; }
command -v gconftool-2 >/dev/null 2>&1 || { echo "Please install gconftool-2 utility"; exit 1; }
command -v tar >/dev/null 2>&1 || { echo "Please install tar utility"; exit 1; }

# check configuration file
[ ! -f "${CONF_INI}" ] && wget -O "${CONF_INI}" https://raw.githubusercontent.com/NicolasBernaerts/ubuntu-scripts/master/backup/data-transfer.ini
[ ! -f "${CONF_INI}" ] && { echo "Configuration file ${CONF_INI} is not available"; exit 1; }

# load sections
ARR_SECTION=( $(grep "^\[" "${CONF_INI}" | tr -d "[]") )

# help message if no parameter
if [ ${#} -eq 0 ];
then
	echo "Script to backup/restore user data between computers."
	echo "General parameters :"
	echo "  --backup           Backup user data to current folder"
	echo "  --restore          Restore user data from current folder"
	echo "  --test             Test mode without real backup or restore"
	echo "  --all              Include all possible data"
	echo "  data1 data2 ...    Data environment to include"      
	echo "Possible data are :"
	echo "${ARR_SECTION[@]}"
    exit 1
fi

# iterate thru parameters
while test ${#} -gt 0
do
	case $1 in
		--backup) OPERATION="backup"; shift; ;;
		--restore) OPERATION="restore"; shift; ;;
		--test) MODE="test"; shift; ;;
		--all) ARR_TODO=( "${ARR_SECTION[@]}" ); shift; ;;
		*) ARR_TODO=( "${ARR_TODO[@]}" "$1" ); shift; ;;
	esac
done

# check compulsory parameters
[ "${OPERATION}" = "" ] && { echo "Please select --backup or --restore"; exit 1; }
[ ${#ARR_TODO[*]} -eq 0 ] && { echo "Please select at least one application environment"; exit 1; }

# loop thru sections
for ENV_NAME in "${ARR_TODO[@]}"
do
	# load lines of current section
	ARR_LINE=( $(sed -e "1,/\[${ENV_NAME}\]/d" "${BACKUP_DIR}/data-transfer.ini" | sed -e "/^\[/,\$d") )

	# loop thru lines
	for LINE in "${ARR_LINE[@]}"
	do
		# get parameters
		ENV_ITEM=$(echo "${LINE}" | cut -d"=" -f1)
		ENV_PATH=$(echo "${LINE}" | cut -d"=" -f2 | cut -d";" -f1)
		ENV_PARAM=$(echo "${LINE}" | cut -d"=" -f2 | cut -d";" -f2)

		# deal with XDG path
		[ "${ENV_PARAM}" = "xdg" ] && ENV_PATH=$(xdg-user-dir "${ENV_PATH}")

		# set relative path based on home directory
		[ "${ENV_PATH:0:1}" != "/" ] && ENV_PATH="$HOME/${ENV_PATH}"

		# set type according to path type (file of folder)
		ENV_TYPE="unknown"
		[ -f "${ENV_PATH}" ] && ENV_TYPE="file"
		[ -d "${ENV_PATH}" ] && ENV_TYPE="folder"

		# set type to tar if parameter is set and path is a folder
		[ "${ENV_PARAM}" = "tar" ] && ENV_TYPE="tar"

		# set type to gconf if parameter is set
		[ "${ENV_PARAM}" = "gconf" ] && ENV_TYPE="gconf"

		# set type to dconf if parameter is set
		[ "${ENV_PARAM}" = "dconf" ] && ENV_TYPE="dconf"

		# add $HOME root to a relative path
		[ "${ENV_PATH:0:1}" != "/" ] && ENV_PATH="${HOME}/${ENV_PATH}"

		# display
		echo "-- ${OPERATION} of ${ENV_PATH} in ${ENV_TYPE} mode"
			
		# action according to environment type
		case ${ENV_TYPE} in

		"tar")
			# set data file
			BACKUP_FILE="${BACKUP_DIR}/${ENV_NAME}/${ENV_ITEM}.tar.gz"

			# backup mode
			if [ "${OPERATION}" = "backup" ]
			then
				# if environment is present, backup
				if [ -d "${ENV_PATH}" ]
				then
					# if not in test mode
					if [ "${MODE}" = "normal" ]
					then
						mkdir --parent "${BACKUP_DIR}/${ENV_NAME}"
						rm --force "${BACKUP_FILE}"
						cd "${ENV_PATH}"
						tar -zcvf "${BACKUP_FILE}" *
					fi

					# dislay progress
					echo " -> [${MODE}] Backed-up to ${BACKUP_FILE}"

				# else, error message
				else
					echo " -> Impossible as ${ENV_PATH} is absent"
				fi

			# restore mode
			else
				# if backup file is present, restore
				if [ -f "${BACKUP_FILE}" ]
				then
					# if not in test mode
					if [ "${MODE}" = "normal" ]
					then
						mkdir --parents "${ENV_PATH}"
						rm --force --recursive ${ENV_PATH}/*
						cd "${ENV_PATH}"
						tar -zxvf "${BACKUP_FILE}"
					fi

					# dislay progress
					echo " -> [${MODE}] Restored from ${BACKUP_FILE}"

				# else, error message
				else
					echo " -> Impossible as ${BACKUP_FILE} is absent"
				fi
			fi
			;;

		"folder")
			# set data file
			BACKUP_FOLDER="${BACKUP_DIR}/${ENV_NAME}/${ENV_ITEM}"

			# backup mode
			if [ "${OPERATION}" = "backup" ]
			then
				# if environment is present, backup
				if [ -d "${ENV_PATH}" ]
				then
					# if not in test mode
					if [ "${MODE}" = "normal" ]
					then
						mkdir --parent "${BACKUP_FOLDER}"
						rm --recursive --force ${BACKUP_FOLDER}/*
						cp --recursive --verbose ${ENV_PATH}/* "${BACKUP_FOLDER}"
					fi

					# dislay progress
					echo " -> [${MODE}] Backed-up to ${BACKUP_FOLDER}"

				# else, error message
				else
					echo " -> Impossible as ${ENV_PATH} is absent"
				fi

			# restore mode
			else
				# if backup file is present, restore
				if [ -d "${BACKUP_FOLDER}" ]
				then
					# if not in test mode
					if [ "${MODE}" = "normal" ]
					then
						mkdir --parents "${ENV_PATH}"
						rm --recursive --force ${ENV_PATH}/*
						cp --recursive --verbose ${BACKUP_FOLDER}/* "${ENV_PATH}"
					fi

					# dislay progress
					echo " -> [${MODE}] Restored from ${BACKUP_FOLDER}"

				# else, error message
				else
					echo " -> Impossible as ${BACKUP_FOLDER} is absent"
				fi
			fi
			;;

		"file")
			# get filename
			ENV_FILE=$(basename "${ENV_PATH}")

			# set data file
			BACKUP_FILE="${BACKUP_DIR}/${ENV_NAME}/${ENV_ITEM}/${ENV_FILE}"

			# backup mode
			if [ "${OPERATION}" = "backup" ]
			then
				# if environment is present, backup
				if [ -f "${ENV_PATH}" ]
				then
					# if not in test mode
					if [ "${MODE}" = "normal" ]
					then
						mkdir --parent "${BACKUP_DIR}/${ENV_NAME}/${ENV_ITEM}"
						rm --recursive --force ${BACKUP_DIR}/${ENV_NAME}/${ENV_ITEM}/*
						cp ${ENV_PATH} "${BACKUP_FILE}"
					fi

					# dislay progress
					echo " -> [${MODE}] Backed-up to ${BACKUP_FILE}"

				# else, error message
				else
					echo " -> Impossible as ${ENV_PATH} is absent"
				fi

			# restore mode
			else
				# if backup file is present, restore
				if [ -f "${BACKUP_FILE}" ]
				then
					# if not in test mode
					[ "${MODE}" = "normal" ] && cp "${BACKUP_FILE}" "${ENV_PATH}"

					# dislay progress
					echo " -> [${MODE}] Restored from ${BACKUP_FILE}"

				# else, error message
				else
					echo " -> Impossible as ${BACKUP_FILE} is absent"
				fi
			fi
			;;

		"gconf")
			# set data file
			BACKUP_FILE="${BACKUP_DIR}/${ENV_NAME}/${ENV_ITEM}.xml"

			# backup mode
			if [ "${OPERATION}" = "backup" ]
			then
				# if not in test mode
				if [ "${MODE}" = "normal" ]
				then
					mkdir --parent "${BACKUP_DIR}/${ENV_NAME}"
					gconftool-2 --dump "${ENV_PATH}" > "${BACKUP_FILE}"
				fi

				# dislay progress
				echo " -> [${MODE}] Backed-up to ${BACKUP_FILE}"

			# restore mode
			else
				# if backup file is present, restore
				if [ -f "${BACKUP_FILE}" ]
				then
					# if not in test mode
					[ "${MODE}" = "normal" ] && gconftool-2 --load "${BACKUP_FILE}"

					# dislay progress
					echo " -> [${MODE}] Restored from ${BACKUP_FILE}"

				# else, error message
				else
					echo " -> Impossible as ${BACKUP_FILE} is absent"
				fi
			fi
			;;

		"dconf")
			# set data file
			BACKUP_FILE="${BACKUP_DIR}/${ENV_NAME}/${ENV_ITEM}.ini"

			# backup mode
			if [ "${OPERATION}" = "backup" ]
			then
				# if not in test mode
				if [ "${MODE}" = "normal" ]
				then
					mkdir --parent "${BACKUP_DIR}/${ENV_NAME}"
					dconf dump "${ENV_PATH}" > "${BACKUP_FILE}"
				fi

				# dislay progress
				echo " -> [${MODE}] Backed-up to ${BACKUP_FILE}"

			# restore mode
			else
				# if backup file is present, restore
				if [ -f "${BACKUP_FILE}" ]
				then
					# if not in test mode
					[ "${MODE}" = "normal" ] && cat "${BACKUP_FILE}" | dconf load "${ENV_PATH}"

					# dislay progress
					echo " -> [${MODE}] Restored from ${BACKUP_FILE}"

				# else, error message
				else
					echo " -> Impossible as ${BACKUP_FILE} is absent"
				fi
			fi
			;;

		*)
			echo " -> Impossible as file is absent or mode is unsupported"
			;;
		esac
	done
done
