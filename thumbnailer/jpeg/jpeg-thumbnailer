#!/usr/bin/env bash
# ---------------------------------------------------------------
# Thumbnailer for JPEG files including camera and location tags
#
# Procedure :
#   http://bernaerts.dyndns.org/linux/...
# Depends on :
#   * exiftool
#   * epeg (compiled)
#   * convert (imagemagick package)
#   * pnmcomp and pnmtopng  (netpbm package)
# Parameters :
#   $1 - full path of JPEG image
#   $2 - full path of generated thumbnail
#   $3 - height of thumbnail in pixels
# Revision history :
#   29/09/2017, V1.0 - Creation by N. Bernaerts
#   02/10/2017, V1.1 - Speedup with epeg and jpegtran
#   07/10/2017, V1.2 - Speedup with thumbnail extraction if available
#   01/03/2018, V1.3 - Correct Jpeg rotation bug
#   28/04/2018, V1.4 - Handle gio or gvfs-copy
#   15/12/2018, V1.5 - Rework for bubblewrap compatibility
# --------------------------------------------------------------

# export local library for epeg
export LD_LIBRARY_PATH="${LD_LIBRARY_PATH}:/usr/local/lib"

# check tools availability
command -v exiftool >/dev/null 2>&1 || { echo "[error] exiftool missing"; exit 1; }
command -v epeg >/dev/null 2>&1 || { echo "[error] epeg missing"; exit 1; }
command -v convert >/dev/null 2>&1 || { echo "[error] convert missing"; exit 1; }
command -v pngtopnm >/dev/null 2>&1 || { echo "[error] pngtopnm missing"; exit 1; }
command -v pnmscalefixed >/dev/null 2>&1 || { echo "[error] pnmscalefixed missing"; exit 1; }
command -v pnmcomp >/dev/null 2>&1 || { echo "[error] pnmcomp missing"; exit 1; }
command -v pnmtopng >/dev/null 2>&1 || { echo "[error] pnmtopng missing"; exit 1; }
command -v pbmtextps >/dev/null 2>&1 || { echo "[error] pbmtextps missing"; exit 1; }
command -v pnmcrop >/dev/null 2>&1 || { echo "[error] pnmcrop missing"; exit 1; }
command -v pnmpad >/dev/null 2>&1 || { echo "[error] pnmpad missing"; exit 1; }

# check parameters
[ "$#" -ne 3 ] && { echo "[error] waiting for 3 parameters"; exit 1; }

# get parameters
FILE_LOCAL="$1"
FILE_THUMB="$2"
SIZE="$3"

# generate temporary local filename
TMP_DIR=$(mktemp -t -d "thumb-jpeg-XXXXXXXX")
TMP_EXTRACT="${TMP_DIR}/extract.jpg"
TMP_THUMB="${TMP_DIR}/thumb.jpg"
TMP_PNM="${TMP_DIR}/thumb.pnm"
TMP_PNG="${TMP_DIR}/thumb.png"

# read exif data
EXIF_DATA=$(exiftool -args -orientation -n -model -gpslatitude "${FILE_LOCAL}")
EXIF_ROTATE=$(echo "${EXIF_DATA}" | grep "Orientation=" | cut -d'=' -f2)
EXIF_MODEL=$(echo "${EXIF_DATA}" | grep -i "Model=" | cut -d'=' -f2- | tr '[:upper:]' '[:lower:]')
EXIF_GPS=$(echo "${EXIF_DATA}" | grep -i "GPSLatitude=" | cut -d'=' -f2-)

# icon in system path
PATH_SYSTEM="/usr/local/sbin/jpeg-thumbnailer.res"
NONE_ALPHA="${PATH_SYSTEM}/none-alpha.pnm"

# -------------
#   Thumbnail
# -------------

# if image has no rotation tag, set to 1
[ "${EXIF_ROTATE}" = "" ] && EXIF_ROTATE="1"

# extract embedded thumbnail
exiftool -b -ThumbnailImage "${FILE_LOCAL}" > "${TMP_EXTRACT}"

# if thumbnail extracted, apply rotation, else generate thumbnail from picture
[ -s "${TMP_EXTRACT}" ] && exiftool -overwrite_original -Orientation=${EXIF_ROTATE} -n "${TMP_EXTRACT}" \
			|| epeg --max=256 "${FILE_LOCAL}" "${TMP_EXTRACT}"

# generate PNM with proper orientation and size
convert -auto-orient "${TMP_EXTRACT}" "${TMP_PNG}" 
pngtopnm "${TMP_PNG}" | pnmscalefixed -xysize 256 256 - > "${TMP_PNM}"

# -----------
#   GPS tag
# -----------

if [ "${EXIF_GPS}" = "" ]
then
	# set to transparent tags
	GPS_TAG="${NONE_ALPHA}"
	GPS_ALPHA="${NONE_ALPHA}"
else
	# declare tags
	GPS_TAG="${PATH_SYSTEM}/gps.pnm"
	GPS_ALPHA="${PATH_SYSTEM}/gps-alpha.pnm"
fi

# -------------------
#  Camera model tag
# -------------------

# if model exif is defined,
if [ "${EXIF_MODEL}" = "" ]
then
	# set transparent camera tags
	CAMERA_TAG="${NONE_ALPHA}"
	CAMERA_ALPHA="${NONE_ALPHA}"
else
	# set camera tags
	CAMERA_TAG="${PATH_SYSTEM}/${EXIF_MODEL}.pnm"
	CAMERA_ALPHA="${PATH_SYSTEM}/${EXIF_MODEL}-alpha.pnm"

	# if camera icon is available, generate icon tags
	if [ ! -f "${CAMERA_TAG}" -o ! -f "${CAMERA_ALPHA}" ]
	then
		# set camera tags
		CAMERA_TAG="${TMP_DIR}/camera.pnm"
		CAMERA_ALPHA="${TMP_DIR}/camera-alpha.pnm"

		# generate version image
		pbmtextps -fontsize 13 "${EXIF_MODEL}" | pnmcrop - | pnmpad -white -left 4 -right 4 -top 4 -bottom 4 - | pnmpad -black -left 2 -right 2 -top 2 -bottom 2 - | pnmtopng - > "${TMP_PNG}"

		# generate tags
		pngtopnm "${TMP_PNG}" > "${CAMERA_TAG}"
		pngtopnm -alpha "${TMP_PNG}" > "${CAMERA_ALPHA}"
	fi
fi

# ------------------
#  Final thumbnail
# ------------------

# generate final thumbnail
pnmcomp -align right -valign bottom -alpha "${GPS_ALPHA}" "${GPS_TAG}" "${TMP_PNM}" | pnmcomp -align left -valign bottom -alpha "${CAMERA_ALPHA}" "${CAMERA_TAG}" - > "${TMP_THUMB}"

# downscale to final size and convert to png
pnmscalefixed -xysize ${SIZE} ${SIZE} "${TMP_THUMB}" | pnmtopng -downscale - > "${FILE_THUMB}"

# remove temporary file
rm --recursive --force "${TMP_DIR}"
