#!/usr/bin/env bash
# ----------------------------------------------------------------
#  Batch conversion of image files
#
#  Depends on :
#    * mimetype
#    * dcraw [dcraw]
#    * convert and identify [imagemagick]
#    * heif-convert [libheif-examples]
#
#  Revision history :
#    12/08/2016, V1.0 - Creation by N. Bernaerts
#    13/08/2016, V1.1 - Add RAW image reading, performance tweaks
#    03/05/2020, V2.0 - Rewrite for Nautilus Python wrapper 
#                       Adaptation for Ubuntu 20.04 LTS 
#    22/05/2020, V2.1 - Add HEIF image conversion 
# ----------------------------------------------------------------

# ------------------
#   Initialisation
# ------------------

# variables
ERROR=""
RATIO=""
FORMAT=""
ARR_FILE=( )

# if no argument, display help
if [ $# -eq 0 ] 
then
  echo "Tool to convert pictures from Nautilus."
  echo "Parameters are :"
  echo "  --format <format>     Target file format (png, jpg, tiff, gif, heic)"
  echo "  --width <widht>       Target width"
  echo "  --height <height>     Target height"
  echo "  --keep-ratio          Keep original ratio"
  echo "  --quality <quality>   Target quality"
  echo "  <file1> <file2> ...   List of files"
  exit
fi

# loop to retrieve arguments
while test $# -gt 0
do
  case "$1" in
    "--format") shift; FORMAT="$1"; shift; ;;
    "--width") shift; WIDTH="$1"; shift; ;;
    "--height") shift; HEIGHT="$1"; shift; ;;
    "--quality") shift; QUALITY="$1"; shift; ;;
    "--keep-ratio") RATIO="keep"; shift; ;;
    *) ARR_FILE=("${ARR_FILE[@]}" "$1"); shift; ;;
   esac
done

# --------------------------
# check tools availability
# --------------------------

command -v mimetype >/dev/null 2>&1 || ERROR="Please install mimetype"
command -v dcraw >/dev/null 2>&1 || ERROR="Please install dcraw"
command -v convert >/dev/null 2>&1 || ERROR="Please install convert [imagemagick]"
command -v identify >/dev/null 2>&1 || ERROR="Please install identify [imagemagick]"
command -v heif-convert >/dev/null 2>&1 || ERROR="Please install heif-convert [libheif-examples]"
command -v heif-enc >/dev/null 2>&1 || ERROR="Please install heif-enc [libheif-examples]"


# generate temporary directory
TMP_DIR=$(mktemp -t -d "image-convert-XXXXXXXX")
pushd "${TMP_DIR}"

# specific mimetypes
ARR_RAW=( "image/x-sony-arw" "image/x-canon-cr2" "image/x-canon-crw" "image/x-kodak-dcr" "image/x-adobe-dng" "image/x-epson-erf" "image/x-kodak-k25" "image/x-kodak-kdc" "image/x-minolta-mrw" "image/x-nikon-nef" "image/x-olympus-orf" "image/x-pentax-pef" "image/x-fuji-raf" "image/x-panasonic-raw" "image/x-sony-sr2" "image/x-sony-srf" "image/x-sigma-x3f" )
ARR_HEIF=( "image/heif" )

# check if file is provided
NBR_FILE=${#ARR_FILE[@]}
[ "${ERROR}" = "" -a ${NBR_FILE} -eq 0 ] && ERROR="No file selected"

# --------------------
#   Files conversion
# --------------------

# loop thru image files
if [ "${ERROR}" = "" ] 
then
	(
	INDEX=0
	for IMAGE_URI in "${ARR_FILE[@]}"
	do
		# increment file index
		INDEX=$((INDEX+1))

		# ------------------
		#   initialisation
		# ------------------
		
		# generate file data
		IMAGE_DIR=$(dirname "${IMAGE_URI}")
		IMAGE_FILE=$(basename "${IMAGE_URI}")
		IMAGE_NAME="${IMAGE_FILE%.*}"
		IMAGE_EXT="${IMAGE_FILE##*.}"

		# set target extension
		[ "${FORMAT}" != "" ] && TARGET_EXT="${FORMAT}" || TARGET_EXT="${IMAGE_EXT}"

		# generate temporary files
		TMP_ORIGINAL="${TMP_DIR}/original.${IMAGE_EXT}"
		TMP_PPM="${TMP_DIR}/image.ppm"
		TMP_JPG="${TMP_DIR}/image.jpg"
		TMP_PNG="${TMP_DIR}/image.png"
		TMP_HEIF="${TMP_DIR}/image.heic"
		TMP_TARGET="${TMP_DIR}/target.${TARGET_EXT}"

		# copy input file to temporary folder
		echo "# ${INDEX} / ${NBR_FILE} - Copy of original image ..."
		gio copy "${IMAGE_URI}" "${TMP_ORIGINAL}"

		# ------------------
		#   pre-treatment
		# ------------------

		# get mimetype
		echo "# ${INDEX} / ${NBR_FILE} - Check specific types ..."
		FILEMIME=$(mimetype --output-format %m "${TMP_ORIGINAL}")
		IS_HEIF=$(echo "${ARR_HEIF[@]}" | grep "${FILEMIME}")
		IS_RAW=$(echo "${ARR_RAW[@]}" | grep "${FILEMIME}")
		
		# pre-treatment of HEIF files
		if [ "${IS_HEIF}" != "" ]
		then
			# convert HEIF to JPG
			echo "# ${INDEX} / ${NBR_FILE} - Convert heif to jpg ..."
			heif-convert -q 100 "${TMP_ORIGINAL}" "${TMP_JPG}"
			TMP_ORIGINAL="${TMP_JPG}"
		
		# pre-treatment of RAW files
		elif [ "${IS_RAW}" != "" ]
		then
			# convert RAW to PPM and set as original image
			echo "# ${INDEX} / ${NBR_FILE} - Convert raw to ppm ..."
			dcraw -w -c "${TMP_ORIGINAL}" > "${TMP_PPM}"
			TMP_ORIGINAL="${TMP_PPM}"
		fi 

		# --------------
		#   conversion
		# --------------

		# if both width and height are provided and aspect ratio should be kept
		if [ "${RATIO}" = "keep" -a "${WIDTH}" != "" -a "${HEIGHT}" != "" ]
		then
			TARGET_SIZE="${WIDTH}x${HEIGHT}"

		# else if both width and height are provided, force new size
		elif [ "${WIDTH}" != "" -a "${HEIGHT}" != "" ]
		then
			TARGET_SIZE="${WIDTH}x${HEIGHT}!"

		# else if width only is provided
		elif [ "${WIDTH}" != "" ]
		then
			TARGET_SIZE="${WIDTH}"
			
		# else if height only is provided
		elif [ "${HEIGHT}" != "" ]
		then
			TARGET_SIZE="x${HEIGHT}"

		# else, no target size
		else
			TARGET_SIZE=""
		fi

  		# conversion parameters
		echo "# ${INDEX} / ${NBR_FILE} - Convert image ..."
		if [ "${TARGET_EXT}" = "heic" ]
		then
			TMP_CONVERT="${TMP_PNG}"
			TMP_QUALITY=100
		else
			TMP_CONVERT="${TMP_TARGET}"
			TMP_QUALITY="${QUALITY}"
		fi
		
		# image conversion
		echo "# ${INDEX} / ${NBR_FILE} - Convert picture ..."
		ARR_PARAM=( "-auto-orient" "${TMP_ORIGINAL}" )
		[ "${TARGET_SIZE}" != "" ] && ARR_PARAM=( "${ARR_PARAM[@]}" "-resize" "${TARGET_SIZE}" )
		[ "${TMP_QUALITY}" != "" ] && ARR_PARAM=( "${ARR_PARAM[@]}" "-quality" "${TMP_QUALITY}" )
  		convert "${ARR_PARAM[@]}" "${TMP_CONVERT}"

		# ------------------
		#   post-treatment
		# ------------------

  		# if needed, convert to heic
		if [ "${TARGET_EXT}" = "heic" ]
		then
			# conversion du HEIC
			echo "# ${INDEX} / ${NBR_FILE} - Post conversion to HEIC ..."
			ARR_PARAM=( "--output" "${TMP_TARGET}" )
			[ "${QUALITY}" != "" ] && ARR_PARAM=( "${ARR_PARAM[@]}" "--quality" "${QUALITY}" )
			heif-enc "${ARR_PARAM[@]}" "${TMP_CONVERT}"
		fi

		# ---------------
		#   final stage
		# ---------------

		# get final image width and height
		TARGET_WIDTH=$(identify -format "%w" "${TMP_CONVERT}")
		TARGET_HEIGHT=$(identify -format "%h" "${TMP_CONVERT}")

		# generate size suffix according to context (forced size or same extension)
		SUFFIX_SIZE=""
		[ "${WIDTH}" != "" -o "${HEIGHT}" != "" ] && SUFFIX_SIZE=" (${TARGET_WIDTH}x${TARGET_HEIGHT})"
		[ "${TARGET_EXT}" = "${IMAGE_EXT}" ] && SUFFIX_SIZE=" (${TARGET_WIDTH}x${TARGET_HEIGHT})"
		
		# generate target name and copy file
		echo "# ${INDEX} / ${NBR_FILE} - Copy back to original folder ..."
		TARGET_URI="${IMAGE_DIR}/${IMAGE_NAME}${SUFFIX_SIZE}.${TARGET_EXT}"
		gio copy "${TMP_TARGET}" "${TARGET_URI}"
	done
	) | zenity --width=500 --height=25 --pulsate --progress --auto-close --title "Conversion of ${NBR_FILE} images"
fi

# -------------------
#   End of operation
# -------------------

# display error message
[ "${ERROR}" != "" ] && zenity --error --width=300 --text="${ERROR}"

# remove temporary directory
popd
rm -r "${TMP_DIR}"

