#!/usr/bin/env bash
# ---------------------------------------------------------
# Imposition of a document to generate a PDF booklet
# target format is selectable (A5, A4, ...) and default format is A4
#
# Setup procedure : http://bernaerts.dyndns.org/linux/74-ubuntu/248-ubuntu-imposition-print-book
#
# Depends on packages : 
#   * poppler-utils
#   * texlive-extra-utils
#   * unoconv
#
# Parameter :
#   $1 - full path of original document
#
# Version history :
#   26/09/2012, V1.0 - Creation by N. Bernaerts
#   05/05/2014, V2.0 - Add target format selection (thanks to Robin idea)
#   16/12/2014, V2.1 - Add file selection dialog
#   10/05/2015, V2.2 - Check tools availability
#   03/11/2015, V3.0 - Add support for LibreOffice & Ms-Office documents
#   18/10/2017, V3.1 - Correct critical bug (thanks to Igor Kushnir)
#   01/05/2020, V3.2 - Switch to pdfbook2
#                      Adaptation for Ubuntu 20.04 LTS 
# ---------------------------------------------------------

# variable
TYPE=""
ERROR=""

# if no argument, display help
if [ $# -eq 0 ] 
then
	echo "Tool to convert a document to a recto/verso booklet"
	echo "Parameters are :"
	echo "  --format         Booklet format (A2 A3 A4 A5 Letter Executive Legal)"
	echo "  --file <file>    File to convert to booklet"
	exit 1
fi

# iterate thru parameters
while test ${#} -gt 0
do
    case $1 in
        "--format") shift; FORMAT="$1"; shift; ;;
        "--file") shift; ORIGINAL_URI="$1"; shift; ;;
        *) shift; ;;
    esac
done

# --------------------------
# check tools availability
# --------------------------

command -v mimetype >/dev/null 2>&1 || ERROR="Please install mimetype"
command -v pdfinfo >/dev/null 2>&1 || ERROR="Please install pdfinfo [poppler-utils package]"
command -v pdfbook2 >/dev/null 2>&1 || ERROR="Please install pdfbook2 [texlive-extra-utils package]"
command -v unoconv >/dev/null 2>&1 || ERROR="Please install unoconv"

# generate temporary directory
TMP_DIR=$(mktemp -t -d "pdf-booklet-XXXXXXXX")
pushd "${TMP_DIR}"

# ------------------
#  Check parameters
# ------------------

# get filename
if [ "${ERROR}" = "" ]
then
	# check if file is given, otherwise open dialog box selection
	[ "${ORIGINAL_URI}" = "" ] && ORIGINAL_URI=$(zenity --file-selection --title="Select document to convert to booklet")

	# if no document selected, exit
	[ "${ORIGINAL_URI}" = "" ] && ERROR="No file selected"
fi

# generate filename data
if [ "${ERROR}" = "" ]
then
	# generate filenames
	ORIGINAL_DIR=$(dirname "${ORIGINAL_URI}")
	ORIGINAL_FILE=$(basename "${ORIGINAL_URI}")
	ORIGINAL_NAME="${ORIGINAL_FILE%.*}"
	ORIGINAL_EXT="${ORIGINAL_FILE##*.}"

	# generate temporary filenames
	TMP_ORIGINAL="${TMP_DIR}/${ORIGINAL_FILE}"
	TMP_PDF="${TMP_DIR}/${ORIGINAL_NAME}.pdf"
fi

# get format
if [ "${ERROR}" = "" ]
then
	# check if target format is given, otherwise open dialog box selection
	if [ "${FORMAT}" = "" ]
	then
		ARR_FORMAT=('false' 'A2' 'false' 'A3' 'true' 'A4' 'false' 'A5' 'false' 'Letter' 'false' 'Executive' 'false' 'Legal')
		TEXT="Please select booklet target format.\n"
		FORMAT=$(zenity --list --radiolist --width 350 --height 380 --title "${ORIGINAL_FILE}" --text "${TEXT}" --column="Choice" --column="Format" ${ARR_FORMAT[@]})
	fi

	# exit if no format selected
	[ "${FORMAT}" = "" ] && ERROR="No target format selected"
fi


# ---------------------
#  Check document type
# ---------------------

if [ "${ERROR}" = "" ]
then
	# copy input file to temporary folder
	gio copy "${ORIGINAL_URI}" "${TMP_ORIGINAL}"
	
	# get the file mime type (application/msword, ...)
	MIMETYPE=$(mimetype -b "${TMP_ORIGINAL}")

	# check if file is a libreoffice file (.odt, .ods, ...)
	CHECK=$(echo "${MIMETYPE}" | grep ".opendocument.")
	[ "${CHECK}" != "" ] && TYPE="libreoffice"

	# check if file is a microsoft file 2007+ file (.docx, .xlsx, .pptx, ...)
	CHECK=$(echo "${MIMETYPE}" | grep "vnd.openxmlformats-officedocument.")
	[ "${CHECK}" != "" ] && TYPE="ms-office"

	# if type is not found, check specific document types
	[ "${TYPE}" = "" ] && case "${MIMETYPE}" in 
	# ms-office document (.doc, .xls, .ppt, ...)
	"application/msword" | "application/vnd.ms-word" | "application/vnd.ms-powerpoint" )
		TYPE="ms-office"
		;;

	# PDF document (.pdf)
	"application/pdf" | "application/x-pdf" | "application/x-bzpdf" | "application/x-gzpdf" )
		TYPE="pdf"
		;;

	# plain text file (.txt)
	"text/plain" | "application/x-shellscript" )
		TYPE="text"
		;;

	# other mimetype
	* )
		;;
	esac

	# if document type is not a candidate one, exit
	[ "${TYPE}" = "" ] && ERROR="Document format is not compatible (pdf, libreoffice or ms-office)"
fi

# --------------------
#  booklet conversion 
# --------------------
if [ "${ERROR}" = "" ]
then
	(

	# if file is not PDF, convert file to pdf
	echo "# Convert original document to PDF format"
	[ "${TYPE}" != "pdf" ] && unoconv -f pdf -o "${TMP_PDF}" "${TMP_ORIGINAL}"

	# if no PDF work file, use original
	echo "# Copy original PDF document"
	[ ! -f "${TMP_PDF}" ] && mv "${TMP_ORIGINAL}" "${TMP_PDF}"

	# calculate number of pages of original PDF 
	# and determine if blank pages to be added at the end to get multiple of 4
	echo "# Calculating number of booklet pages"
	NUMPAGES=$(pdfinfo "${TMP_PDF}" | grep "Pages" | xargs | cut -d' ' -f2)
	DIVPAGES=$((${NUMPAGES} % 4))
	[ ${DIVPAGES} -gt 0 ] && NUMPAGES=$((${NUMPAGES} + 4 - ${DIVPAGES}))

	# generate document with proper page number (multiple of 4)
	echo "# Generating PDF booklet ..."
	TARGET=$(echo "${FORMAT}" | tr '[:upper:]' '[:lower:]')
	pdfbook2 --short-edge --signature ${NUMPAGES} "--paper=${TARGET}paper" "${TMP_PDF}"

	# copy booklet to original directory
	echo "# Copy resulting PDF booklet"
	gio copy "${TMP_DIR}/${ORIGINAL_NAME}-book.pdf" "${ORIGINAL_DIR}/${ORIGINAL_NAME}-book.pdf"

	) | zenity --width=500 --height=25 --progress --pulsate --auto-close --title "${FORMAT} booklet generation" --window-icon="/usr/share/icons/pdf-booklet.png"
fi

# -------------------
#   End of operation
# -------------------

# display error message
[ "${ERROR}" != "" ] && zenity --error --width=300 --text="${ERROR}"

# remove temporary directory
popd
rm -r "${TMP_DIR}"
